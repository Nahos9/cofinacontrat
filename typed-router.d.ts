/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'cat': RouteRecordInfo<'cat', '/cat', Record<never, never>, Record<never, never>>,
    'cat-id': RouteRecordInfo<'cat-id', '/cat/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cat-add': RouteRecordInfo<'cat-add', '/cat/add', Record<never, never>, Record<never, never>>,
    'cat-edit-id': RouteRecordInfo<'cat-edit-id', '/cat/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cat-notification': RouteRecordInfo<'cat-notification', '/cat/notification', Record<never, never>, Record<never, never>>,
    'cat-notification-id': RouteRecordInfo<'cat-notification-id', '/cat/notification/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cat-notification-add': RouteRecordInfo<'cat-notification-add', '/cat/notification/add', Record<never, never>, Record<never, never>>,
    'cat-notification-edit-id': RouteRecordInfo<'cat-notification-edit-id', '/cat/notification/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cat-simple-notification': RouteRecordInfo<'cat-simple-notification', '/cat/simple-notification', Record<never, never>, Record<never, never>>,
    'cat-simple-notification-id': RouteRecordInfo<'cat-simple-notification-id', '/cat/simple-notification/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cat-simple-notification-add': RouteRecordInfo<'cat-simple-notification-add', '/cat/simple-notification/add', Record<never, never>, Record<never, never>>,
    'cat-simple-notification-edit-id': RouteRecordInfo<'cat-simple-notification-edit-id', '/cat/simple-notification/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'contract': RouteRecordInfo<'contract', '/contract', Record<never, never>, Record<never, never>>,
    'contract-contract_id-guarantor': RouteRecordInfo<'contract-contract_id-guarantor', '/contract/:contract_id/guarantor', { contract_id: ParamValue<true> }, { contract_id: ParamValue<false> }>,
    'contract-contract_id-guarantor-id': RouteRecordInfo<'contract-contract_id-guarantor-id', '/contract/:contract_id/guarantor/:id', { contract_id: ParamValue<true>, id: ParamValue<true> }, { contract_id: ParamValue<false>, id: ParamValue<false> }>,
    'contract-contract_id-guarantor-add': RouteRecordInfo<'contract-contract_id-guarantor-add', '/contract/:contract_id/guarantor/add', { contract_id: ParamValue<true> }, { contract_id: ParamValue<false> }>,
    'contract-contract_id-guarantor-edit-id': RouteRecordInfo<'contract-contract_id-guarantor-edit-id', '/contract/:contract_id/guarantor/edit/:id', { contract_id: ParamValue<true>, id: ParamValue<true> }, { contract_id: ParamValue<false>, id: ParamValue<false> }>,
    'contract-id': RouteRecordInfo<'contract-id', '/contract/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'contract-add': RouteRecordInfo<'contract-add', '/contract/add', Record<never, never>, Record<never, never>>,
    'contract-edit-id': RouteRecordInfo<'contract-edit-id', '/contract/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'contract-historical': RouteRecordInfo<'contract-historical', '/contract/historical', Record<never, never>, Record<never, never>>,
    'deadline-postponed': RouteRecordInfo<'deadline-postponed', '/deadline-postponed', Record<never, never>, Record<never, never>>,
    'deadline-postponed-id': RouteRecordInfo<'deadline-postponed-id', '/deadline-postponed/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'deadline-postponed-add': RouteRecordInfo<'deadline-postponed-add', '/deadline-postponed/add', Record<never, never>, Record<never, never>>,
    'deadline-postponed-edit-id': RouteRecordInfo<'deadline-postponed-edit-id', '/deadline-postponed/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'deadline-postponed-historical': RouteRecordInfo<'deadline-postponed-historical', '/deadline-postponed/historical', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'not-authorized': RouteRecordInfo<'not-authorized', '/not-authorized', Record<never, never>, Record<never, never>>,
    'notification': RouteRecordInfo<'notification', '/notification', Record<never, never>, Record<never, never>>,
    'notification-id': RouteRecordInfo<'notification-id', '/notification/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'notification-notification_id-guarantor': RouteRecordInfo<'notification-notification_id-guarantor', '/notification/:notification_id/guarantor', { notification_id: ParamValue<true> }, { notification_id: ParamValue<false> }>,
    'notification-notification_id-guarantor-id': RouteRecordInfo<'notification-notification_id-guarantor-id', '/notification/:notification_id/guarantor/:id', { notification_id: ParamValue<true>, id: ParamValue<true> }, { notification_id: ParamValue<false>, id: ParamValue<false> }>,
    'notification-notification_id-guarantor-add': RouteRecordInfo<'notification-notification_id-guarantor-add', '/notification/:notification_id/guarantor/add', { notification_id: ParamValue<true> }, { notification_id: ParamValue<false> }>,
    'notification-notification_id-guarantor-edit-id': RouteRecordInfo<'notification-notification_id-guarantor-edit-id', '/notification/:notification_id/guarantor/edit/:id', { notification_id: ParamValue<true>, id: ParamValue<true> }, { notification_id: ParamValue<false>, id: ParamValue<false> }>,
    'notification-add': RouteRecordInfo<'notification-add', '/notification/add', Record<never, never>, Record<never, never>>,
    'notification-edit-id': RouteRecordInfo<'notification-edit-id', '/notification/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'notification-historical': RouteRecordInfo<'notification-historical', '/notification/historical', Record<never, never>, Record<never, never>>,
    'notification-without-signed-contract': RouteRecordInfo<'notification-without-signed-contract', '/notification/without-signed-contract', Record<never, never>, Record<never, never>>,
    'pv': RouteRecordInfo<'pv', '/pv', Record<never, never>, Record<never, never>>,
    'pv-id': RouteRecordInfo<'pv-id', '/pv/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'pv-add': RouteRecordInfo<'pv-add', '/pv/add', Record<never, never>, Record<never, never>>,
    'pv-edit-id': RouteRecordInfo<'pv-edit-id', '/pv/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'pv-historical': RouteRecordInfo<'pv-historical', '/pv/historical', Record<never, never>, Record<never, never>>,
    'pv-historical-mortgage': RouteRecordInfo<'pv-historical-mortgage', '/pv/historical/mortgage', Record<never, never>, Record<never, never>>,
    'pv-without-notification': RouteRecordInfo<'pv-without-notification', '/pv/without-notification', Record<never, never>, Record<never, never>>,
    'pv-without-notification-old': RouteRecordInfo<'pv-without-notification-old', '/pv/without-notification-old', Record<never, never>, Record<never, never>>,
    'settings-user-tab': RouteRecordInfo<'settings-user-tab', '/settings/user/:tab', { tab: ParamValue<true> }, { tab: ParamValue<false> }>,
    'simple-notification': RouteRecordInfo<'simple-notification', '/simple-notification', Record<never, never>, Record<never, never>>,
    'simple-notification-id': RouteRecordInfo<'simple-notification-id', '/simple-notification/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'simple-notification-notification_id-guarantor': RouteRecordInfo<'simple-notification-notification_id-guarantor', '/simple-notification/:notification_id/guarantor', { notification_id: ParamValue<true> }, { notification_id: ParamValue<false> }>,
    'simple-notification-notification_id-guarantor-id': RouteRecordInfo<'simple-notification-notification_id-guarantor-id', '/simple-notification/:notification_id/guarantor/:id', { notification_id: ParamValue<true>, id: ParamValue<true> }, { notification_id: ParamValue<false>, id: ParamValue<false> }>,
    'simple-notification-notification_id-guarantor-add': RouteRecordInfo<'simple-notification-notification_id-guarantor-add', '/simple-notification/:notification_id/guarantor/add', { notification_id: ParamValue<true> }, { notification_id: ParamValue<false> }>,
    'simple-notification-notification_id-guarantor-edit-id': RouteRecordInfo<'simple-notification-notification_id-guarantor-edit-id', '/simple-notification/:notification_id/guarantor/edit/:id', { notification_id: ParamValue<true>, id: ParamValue<true> }, { notification_id: ParamValue<false>, id: ParamValue<false> }>,
    'simple-notification-add': RouteRecordInfo<'simple-notification-add', '/simple-notification/add', Record<never, never>, Record<never, never>>,
    'simple-notification-edit-id': RouteRecordInfo<'simple-notification-edit-id', '/simple-notification/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'simple-notification-historical': RouteRecordInfo<'simple-notification-historical', '/simple-notification/historical', Record<never, never>, Record<never, never>>,
    'simple-notification-without-signed-notification': RouteRecordInfo<'simple-notification-without-signed-notification', '/simple-notification/without-signed-notification', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
