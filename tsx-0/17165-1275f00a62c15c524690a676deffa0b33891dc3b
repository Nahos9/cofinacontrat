{"code":"(()=>{\nvar __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __name=(target2,value)=>__defProp(target2,\"name\",{value,configurable:true});var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target2)=>(target2=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target2,\"default\",{value:mod,enumerable:true}):target2,mod));var import_node_fs=require(\"node:fs\");var import_node_path=require(\"node:path\");var import_tools=require(\"@iconify/tools\");var import_utils=require(\"@iconify/utils\");const sources={svg:[{dir:\"resources/images/iconify-svg\",monotone:false,prefix:\"custom\"}],icons:[],json:[require.resolve(\"@iconify-json/tabler/icons.json\"),{filename:require.resolve(\"@iconify-json/fa/icons.json\"),icons:[\"facebook\",\"google\",\"twitter\",\"circle\"]}]};const target=(0,import_node_path.join)(__dirname,\"icons.css\");(async function(){const dir=(0,import_node_path.dirname)(target);try{await import_node_fs.promises.mkdir(dir,{recursive:true})}catch(err){}const allIcons=[];if(sources.icons){const sourcesJSON=sources.json?sources.json:sources.json=[];const organizedList=organizeIconsList(sources.icons);for(const prefix in organizedList){const filename=require.resolve(`@iconify/json/json/${prefix}.json`);sourcesJSON.push({filename,icons:organizedList[prefix]})}}if(sources.json){for(let i=0;i<sources.json.length;i++){const item=sources.json[i];const filename=typeof item===\"string\"?item:item.filename;const content=JSON.parse(await import_node_fs.promises.readFile(filename,\"utf8\"));for(const key in content){if(key===\"prefix\"&&content.prefix===\"tabler\"){for(const k in content.icons)content.icons[k].body=content.icons[k].body.replace(/stroke-width=\"2\"/g,'stroke-width=\"1.5\"')}}if(typeof item!==\"string\"&&item.icons?.length){const filteredContent=(0,import_utils.getIcons)(content,item.icons);if(!filteredContent)throw new Error(`Cannot find required icons in ${filename}`);allIcons.push(filteredContent)}else{allIcons.push(content)}}}if(sources.svg){for(let i=0;i<sources.svg.length;i++){const source=sources.svg[i];const iconSet=await(0,import_tools.importDirectory)(source.dir,{prefix:source.prefix});await iconSet.forEach(async(name,type)=>{if(type!==\"icon\")return;const svg=iconSet.toSVG(name);if(!svg){iconSet.remove(name);return}try{await(0,import_tools.cleanupSVG)(svg);if(source.monotone){await(0,import_tools.parseColors)(svg,{defaultColor:\"currentColor\",callback:(attr,colorStr,color)=>{return!color||(0,import_tools.isEmptyColor)(color)?colorStr:\"currentColor\"}})}await(0,import_tools.runSVGO)(svg)}catch(err){console.error(`Error parsing ${name} from ${source.dir}:`,err);iconSet.remove(name);return}iconSet.fromSVG(name,svg)});allIcons.push(iconSet.export())}}const cssContent=allIcons.map(iconSet=>(0,import_utils.getIconsCSS)(iconSet,Object.keys(iconSet.icons),{iconSelector:\".{prefix}-{name}\",mode:\"mask\"})).join(\"\\n\");await import_node_fs.promises.writeFile(target,cssContent,\"utf8\");console.log(`Saved CSS to ${target}!`)})().catch(err=>{console.error(err)});function organizeIconsList(icons){const sorted=Object.create(null);icons.forEach(icon=>{const item=(0,import_utils.stringToIcon)(icon);if(!item)return;const prefix=item.prefix;const prefixList=sorted[prefix]?sorted[prefix]:sorted[prefix]=[];const name=item.name;if(!prefixList.includes(name))prefixList.push(name)});return sorted}__name(organizeIconsList,\"organizeIconsList\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["fs"],"sources":["/var/www/html/CofCredit/resources/js/plugins/iconify/build-icons.js"],"sourcesContent":["/**\n * This is an advanced example for creating icon bundles for Iconify SVG Framework.\n *\n * It creates a bundle from:\n * - All SVG files in a directory.\n * - Custom JSON files.\n * - Iconify icon sets.\n * - SVG framework.\n *\n * This example uses Iconify Tools to import and clean up icons.\n * For Iconify Tools documentation visit https://docs.iconify.design/tools/tools2/\n */\nimport { promises as fs } from 'node:fs';\nimport { dirname, join } from 'node:path';\n// Installation: npm install --save-dev @iconify/tools @iconify/utils @iconify/json @iconify/iconify\nimport { cleanupSVG, importDirectory, isEmptyColor, parseColors, runSVGO } from '@iconify/tools';\nimport { getIcons, getIconsCSS, stringToIcon } from '@iconify/utils';\nconst sources = {\n    svg: [\n        {\n            dir: 'resources/images/iconify-svg',\n            monotone: false,\n            prefix: 'custom',\n        },\n        // {\n        //   dir: 'emojis',\n        //   monotone: false,\n        //   prefix: 'emoji',\n        // },\n    ],\n    icons: [\n    // 'mdi:home',\n    // 'mdi:account',\n    // 'mdi:login',\n    // 'mdi:logout',\n    // 'octicon:book-24',\n    // 'octicon:code-square-24',\n    ],\n    json: [\n        // Custom JSON file\n        // 'json/gg.json',\n        // Iconify JSON file (@iconify/json is a package name, /json/ is directory where files are, then filename)\n        require.resolve('@iconify-json/tabler/icons.json'),\n        {\n            filename: require.resolve('@iconify-json/fa/icons.json'),\n            icons: [\n                'facebook',\n                'google',\n                'twitter',\n                'circle',\n            ],\n        },\n        // Custom file with only few icons\n        // {\n        //   filename: require.resolve('@iconify-json/line-md/icons.json'),\n        //   icons: [\n        //     'home-twotone-alt',\n        //     'github',\n        //     'document-list',\n        //     'document-code',\n        //     'image-twotone',\n        //   ],\n        // },\n    ],\n};\n// File to save bundle to\nconst target = join(__dirname, 'icons.css');\n(async function () {\n    // Create directory for output if missing\n    const dir = dirname(target);\n    try {\n        await fs.mkdir(dir, {\n            recursive: true,\n        });\n    }\n    catch (err) {\n        //\n    }\n    const allIcons = [];\n    /**\n     * Convert sources.icons to sources.json\n     */\n    if (sources.icons) {\n        const sourcesJSON = sources.json ? sources.json : (sources.json = []);\n        // Sort icons by prefix\n        const organizedList = organizeIconsList(sources.icons);\n        for (const prefix in organizedList) {\n            const filename = require.resolve(`@iconify/json/json/${prefix}.json`);\n            sourcesJSON.push({\n                filename,\n                icons: organizedList[prefix],\n            });\n        }\n    }\n    /**\n     * Bundle JSON files and collect icons\n     */\n    if (sources.json) {\n        for (let i = 0; i < sources.json.length; i++) {\n            const item = sources.json[i];\n            // Load icon set\n            const filename = typeof item === 'string' ? item : item.filename;\n            const content = JSON.parse(await fs.readFile(filename, 'utf8'));\n            for (const key in content) {\n                if (key === 'prefix' && content.prefix === 'tabler') {\n                    for (const k in content.icons)\n                        content.icons[k].body = content.icons[k].body.replace(/stroke-width=\"2\"/g, 'stroke-width=\"1.5\"');\n                }\n            }\n            // Filter icons\n            if (typeof item !== 'string' && item.icons?.length) {\n                const filteredContent = getIcons(content, item.icons);\n                if (!filteredContent)\n                    throw new Error(`Cannot find required icons in ${filename}`);\n                // Collect filtered icons\n                allIcons.push(filteredContent);\n            }\n            else {\n                // Collect all icons from the JSON file\n                allIcons.push(content);\n            }\n        }\n    }\n    /**\n     * Bundle custom SVG icons and collect icons\n     */\n    if (sources.svg) {\n        for (let i = 0; i < sources.svg.length; i++) {\n            const source = sources.svg[i];\n            // Import icons\n            const iconSet = await importDirectory(source.dir, {\n                prefix: source.prefix,\n            });\n            // Validate, clean up, fix palette, etc.\n            await iconSet.forEach(async (name, type) => {\n                if (type !== 'icon')\n                    return;\n                // Get SVG instance for parsing\n                const svg = iconSet.toSVG(name);\n                if (!svg) {\n                    // Invalid icon\n                    iconSet.remove(name);\n                    return;\n                }\n                // Clean up and optimise icons\n                try {\n                    // Clean up icon code\n                    await cleanupSVG(svg);\n                    if (source.monotone) {\n                        // Replace color with currentColor, add if missing\n                        // If icon is not monotone, remove this code\n                        await parseColors(svg, {\n                            defaultColor: 'currentColor',\n                            callback: (attr, colorStr, color) => {\n                                return !color || isEmptyColor(color) ? colorStr : 'currentColor';\n                            },\n                        });\n                    }\n                    // Optimise\n                    await runSVGO(svg);\n                }\n                catch (err) {\n                    // Invalid icon\n                    console.error(`Error parsing ${name} from ${source.dir}:`, err);\n                    iconSet.remove(name);\n                    return;\n                }\n                // Update icon from SVG instance\n                iconSet.fromSVG(name, svg);\n            });\n            // Collect the SVG icon\n            allIcons.push(iconSet.export());\n        }\n    }\n    // Generate CSS from collected icons\n    const cssContent = allIcons\n        .map(iconSet => getIconsCSS(iconSet, Object.keys(iconSet.icons), {\n        iconSelector: '.{prefix}-{name}',\n        mode: 'mask',\n    }))\n        .join('\\n');\n    // Save the CSS to a file\n    await fs.writeFile(target, cssContent, 'utf8');\n    console.log(`Saved CSS to ${target}!`);\n})().catch(err => {\n    console.error(err);\n});\n/**\n * Sort icon names by prefix\n */\nfunction organizeIconsList(icons) {\n    const sorted = Object.create(null);\n    icons.forEach(icon => {\n        const item = stringToIcon(icon);\n        if (!item)\n            return;\n        const prefix = item.prefix;\n        const prefixList = sorted[prefix] ? sorted[prefix] : (sorted[prefix] = []);\n        const name = item.name;\n        if (!prefixList.includes(name))\n            prefixList.push(name);\n    });\n    return sorted;\n}\n"]}}